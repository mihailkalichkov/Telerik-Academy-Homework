Task 1 Write a SQL query to find the names and salaries of the employees
that take the minimal salary in the company. Use a nested SELECT statement.

SELECT FirstName + ' ' + LastName AS Name, Salary
FROM Employees
WHERE Salary= (SELECT MIN(Salary) FROM Employees)

Task 2 Write a SQL query to find the names and salaries of the employees
that have a salary that is up to 10% higher than the minimal salary for the company.

SELECT FirstName + ' ' + LastName AS Name, Salary
FROM Employees
WHERE Salary <= (SELECT MIN(Salary) FROM Employees)*1.1

Task 3 Write a SQL query to find the full name, salary and department
of the employees that take the minimal salary in their department. Use a nested SELECT statement.

SELECT e.FirstName + ' ' + e.LastName AS Name, e.Salary, d.Name
FROM Employees e
INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID
WHERE Salary = (SELECT MIN(Salary) FROM Employees WHERE DepartmentID=e.DepartmentID)

Task 4 Write a SQL query to find the average salary in the department #1.

SELECT AVG(Salary) as [Average Salary]
FROM Employees
WHERE DepartmentID = 1

Task 5 Write a SQL query to find the average salary  in the "Sales" department.

SELECT AVG(e.Salary) as [Average Salary]
FROM Employees e
INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID
WHERE d.Name= 'Sales'

Task 6 Write a SQL query to find the number of employees in the "Sales" department.

SELECT COUNT(e.EmployeeID) AS [Number of employees]
FROM Employees e
INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID
WHERE d.Name= 'Sales'

Task 7 Write a SQL query to find the number of all employees that have manager.

SELECT COUNT(e.EmployeeID) AS [Number of employees]
FROM Employees e
WHERE e.ManagerID IS NOT NULL

Task 8 Write a SQL query to find the number of all employees that have no manager.

SELECT COUNT(e.EmployeeID) AS [Number of employees]
FROM Employees e
WHERE e.ManagerID IS NULL

Task 9 Write a SQL query to find all departments and the average salary for each of them.

SELECT d.DepartmentID, d.Name, AVG(e.Salary) AS [Average Salary]
FROM Employees e
INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID
Group BY d.DepartmentID, d.Name

Task 10 Write a SQL query to find the count of all employees in each department and for each town.

SELECT d.DepartmentID, d.Name as [Department Name], t.Name as [Town Name] , COUNT(e.EmployeeID) as [Number of Employees]
FROM Employees e
INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID
INNER JOIN Addresses a ON e.AddressID = a.AddressID
INNER JOIN Towns t ON a.TownID = t.TownID
GROUP BY d.DepartmentID, d.Name, t.Name
ORDER BY d.Name, t.Name, [Number of Employees]

Task 11 Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.

SELECT m.ManagerID, e.FirstName, e.LastName
FROM Employees m
INNER JOIN Employees e ON m.ManagerID = e.EmployeeID
GROUP BY m.ManagerID, e.FirstName, e.LastName
HAVING COUNT(m.EmployeeID)=5

Task 12 Write a SQL query to find all employees along with their managers.
For employees that do not have manager display the value "(no manager)".

SELECT e.FirstName + ' ' + e.LastName AS [Employee Name],
COALESCE(m.FirstName + ' ' +m.LastName, 'no manager') as [Manager Name]
FROM Employees e
LEFT JOIN Employees m ON e.ManagerID = m.EmployeeID
ORDER BY m.ManagerID

Task 13 Write a SQL query to find the names of all employees whose last name
is exactly 5 characters long. Use the built-in LEN(str) function.

SELECT e.FirstName, e.LastName
FROM Employees e
WHERE LEN(e.LastName) = 5

Task 14 Write a SQL query to display the current date and time in the following
format "day.month.year hour:minutes:seconds:milliseconds". Search in  Google
to find how to format dates in SQL Server.

SELECT CONVERT(varchar, getdate(), 113) as [Current Date and Time]

Task 15 Write a SQL statement to create a table Users. Users should have username,
password, full name and last login time. Choose appropriate data types for the table fields.
Define a primary key column with a primary key constraint. Define the primary key column as
identity to facilitate inserting records. Define unique constraint to avoid repeating usernames.
Define a check constraint to ensure the password is at least 5 characters long.

Copied from the forum
CREATE TABLE Users (
  UserID int IDENTITY,
  UserName nvarchar(20) NOT NULL,
  UserPassword nvarchar(100),
  FullName nvarchar(100) NOT NULL,
  LastLogin datetime,
  CONSTRAINT PK_Persons PRIMARY KEY(UserID),
  CONSTRAINT UC_UserName UNIQUE (UserName),
  CONSTRAINT CC_PASSWORD CHECK (LEN(UserPassword)>=5)
)
GO

-- INSERT data
SET IDENTITY_INSERT [dbo].[Users] ON 
GO
INSERT [dbo].[Users] ([UserID], [UserName], [UserPassword], [FullName], [LastLogin]) VALUES (1, N'pesho', N'asdsdd', N'Pesho Petrov', CAST(N'2014-08-22 14:31:50.473' AS DateTime))
GO
INSERT [dbo].[Users] ([UserID], [UserName], [UserPassword], [FullName], [LastLogin]) VALUES (2, N'gosho', N'3edff', N'Gosho Goshov', CAST(N'2014-08-22 00:12:50.473' AS DateTime))
GO
INSERT [dbo].[Users] ([UserID], [UserName], [UserPassword], [FullName], [LastLogin]) VALUES (3, N'mariq', N'dadkfkw', N'Mariq Petrova', CAST(N'2014-08-22 20:12:50.473' AS DateTime))
GO
INSERT [dbo].[Users] ([UserID], [UserName], [UserPassword], [FullName], [LastLogin]) VALUES (4, N'mitko', N'dsew42', N'Dimitar Dimitrov', CAST(N'2014-08-20 00:12:50.473' AS DateTime))
GO
INSERT [dbo].[Users] ([UserID], [UserName], [UserPassword], [FullName], [LastLogin]) VALUES (5, N'elena', N'lssdfdsf', N'Elena Milanova', CAST(N'2014-05-20 00:12:50.473' AS DateTime))
GO
SET IDENTITY_INSERT [dbo].[Users] OFF
GO











